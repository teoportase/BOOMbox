@page "/SoundBoard"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<head>
    <!-- Imports icons -->
    <link rel="stylesheet" href="https://cdn.lineicons.com/4.0/lineicons.css" />
</head>

<div id="body-wrapper">
    <nav class="sidebar">
        <div class="brand">
            <img src="res/Boombox.svg" class="boombox-logo" alt="boombox icon">
        </div><p class="sidebar--header">OUR PICKS</p>
        <div class="menu recommendations">
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Rain On Me</span>
                </a>
            </div>
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Supalonely (feat. Gus Dapperton)</span>
                </a>
            </div>
        </div>
        <div class="separator"></div>
        <p class="sidebar--header">YOUR FAVOURITES</p>
        <div class="menu likes">
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Up From the South</span>
                </a>
            </div>
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Mosaic</span>
                </a>
            </div>
        </div>
    </nav>
    <div class="header">
        <div class="header--bg"></div>
        <div class="header--buttons">
            <a href="/">
                @*change this later*@
                <button class="header--button previous">
                    <i class="lni lni-chevron-left"></i>
                </button>
            </a>
        </div>

        <!-- Hamburger Button Implementation -->
            <div id="menu">
        <div class="@hamburgerToggle" @onclick="ToggleHamburger">
            <div class="line1"></div>
            <div class="line2"></div>
            <div class="line3"></div>
        </div>
        <nav class="@navToggle" id="nav">
            <ul>
                <li><a 
                    <label class="brightnessButton" for="checkbox">
                        <input type="checkbox" id="checkbox" @bind="themeSwitch" @oninput="ChangeTheme"/>
                        <span class="slider"></span>
                        </label>
                </a></li>
                <li><a href="#">
                    <!-- Not decided whether to implement the language button or not -->
                        <ul class="language-button">
                            <vr id="en_click" class="language-button current-language">EN</vr>
                            <vr id="kr_click" class="language-button">KR</vr>
                            <vr id="se_click" class="language-button">SE</vr>
                        </ul>
                </a></li>
                <li><a href="#">Option 3</a></li>
                <li><a href="#">Option 4</a></li>
            </ul>
        </nav>
    </div>
    <div class="@menuBg" id="menu-bg"></div>
    </div>
    <main>
        <LibraryComponent />
    </main>
</div>

@code {
    bool themeSwitch;
    string hamburgerToggle { get; set; } = "setting";
    string navToggle { get; set; } = "nav";
    string menuBg { get; set; } = "menu-bg";

    //MQTT message topic
    protected readonly string topic = "sound";

    //Instantiating Library object
    // The "?" means that songLibrary may be null
    protected Library ? songLibrary = new Library();

    //This funtion will run on page load
    protected override async Task OnInitializedAsync()
    {
        //Instantiating HttpClient to make a request
        HttpClient client = new HttpClient();

        //Reading albums and songs from .json file into a Library
        songLibrary = await HttpClient.GetFromJsonAsync<Library>("/res/albums.json");
    }

    protected async Task ChangeTheme()
    {
        if (themeSwitch)
        {
            await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','dark')");
        } else
        {
            await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','light')");
        }
    }
    // Method to open the Hamburger Button
    protected void ToggleHamburger()
    {
        if (hamburgerToggle == "setting")
        {
            hamburgerToggle = "setting change";
            menuBg = "menu-bg change-bg change";
            navToggle = "nav change";


        }
        else if (hamburgerToggle == "setting change")
        {
            hamburgerToggle = "setting";
            menuBg = "menu-bg";
            navToggle = "nav";
        }
    }
}