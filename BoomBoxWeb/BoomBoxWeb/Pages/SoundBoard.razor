@page "/SoundBoard"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<head>
    <!-- Imports icons -->
    <link rel="stylesheet" href="https://cdn.lineicons.com/4.0/lineicons.css" />
</head>

<div id="body-wrapper">
    <nav class="sidebar">
        <div class="brand">
            <img src="res/Boombox.svg" class="boombox-logo" alt="boombox icon">
        </div>
        @*<p class="sidebar--header">OUR PICKS</p>
        <div class="menu recommendations">
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Rain On Me</span>
                </a>
            </div>
            <div class="menu--item">
                <a href="#">
                    <img src="http://via.placeholder.com/32x32" alt="">
                    <span class="menu--item--text">Supalonely (feat. Gus Dapperton)</span>
                </a>
            </div>
        </div>*@
        <div class="separator"></div>
        <p class="sidebar--header">YOUR FAVOURITES</p>
        <LikedSongsComponent />
    </nav>
    <div class="header">
        <div class="header--bg"></div>
            <a>
                <label class="brightnessButton" for="checkbox">
                    <input type="checkbox" id="checkbox" @bind="themeSwitch" @oninput="ChangeTheme" />
                    <span class="slider"></span>
                </label>
            </a>
        <!-- Hamburger Button Implementation -->
        <div id="menu">
            <div class="@hamburgerToggle" @onclick="ToggleHamburger">
                <div class="line1"></div>
                <div class="line2"></div>
                <div class="line3"></div>
            </div>
            <nav class="@navToggle" id="nav">
                <ul>
                    <li><a>
                    <label class="check--container" for="auto--checkbox">
                            Automatic theme change
                        <input type="checkbox" name="auto--checkbox" @bind="automaticChange" @oninput="ToggleAutomaticChange"/>
                        <span class="checkmark"></span>
                    </label>
                    </a></li>
                    <li><a href="#">About us</a></li>
                </ul>
            </nav>
        </div>
    <div class="@menuBg" id="menu-bg"></div>
    </div>
    <main>
        <LibraryComponent />
    </main>
</div>

@code {
    //themeSwitch is bound to the checkbox
    //true == dark mode; false == light mode
    bool themeSwitch;
    bool automaticChange = true;
    string isChecked = "checked";

    //hamburger menu state
    //true == expanded; false == hidden
    bool hamburgerMenu = false;

    string hamburgerToggle { get; set; } = "setting";
    string navToggle { get; set; } = "nav";
    string menuBg { get; set; } = "menu-bg";

    //MQTT message topic
    protected readonly string topic = "sound";

    //Instantiating Library object
    // The "?" means that songLibrary may be null
    protected Library ? songLibrary = new Library();

    //This funtion will run on page load
    protected override async Task OnInitializedAsync()
    {
        //Instantiating HttpClient to make a request
        HttpClient client = new HttpClient();

        //Reading albums and songs from .json file into a Library
        songLibrary = await HttpClient.GetFromJsonAsync<Library>("/res/albums.json");

        //Read values from the local storage (if they exist)
        if (localStorage.ContainKey("auto"))
        {
            automaticChange = localStorage.GetItem<bool>("auto");
        }

        if (localStorage.ContainKey("theme"))
        {
            themeSwitch= localStorage.GetItem<bool>("theme");
        }

        // Change the theme based on preferences
        if (automaticChange)
        {
            int currentHour = DateTime.Now.Hour;

            if (currentHour >= 6 && currentHour < 20)
            {
                await ChangeTheme("light");
                themeSwitch = true;
            }
            else
            {
                await ChangeTheme("dark");
                themeSwitch = false;
            }
        } 
        else
        {
            if (themeSwitch)
            {
                await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','dark')");
                themeSwitch = false;
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','light')");
                themeSwitch = true;
            }
        }
    }

    //Function for the checkbox
    protected async Task ChangeTheme()
    {
        Console.WriteLine(themeSwitch);
        if (themeSwitch)
        {
            await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','dark')");
        } else
        {
            await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','light')");
        }
        localStorage.SetItem("theme", themeSwitch);
        Console.WriteLine(themeSwitch);
    }
    
    //Function for calling a specific theme
    protected async Task ChangeTheme(string theme)
    {
        await JSRuntime.InvokeAsync<object>("eval", "document.documentElement.setAttribute('data-theme','"+ theme + "')");
        localStorage.SetItem("theme", themeSwitch);
    }

    // Method to open the Hamburger Button
    protected void ToggleHamburger()
    {
        if (hamburgerMenu == false)
        {
            hamburgerToggle = "setting change";
            menuBg = "menu-bg change-bg change";
            navToggle = "nav change";
            hamburgerMenu = true;

        }
        else if (hamburgerMenu == true)
        {
            hamburgerToggle = "setting";
            menuBg = "menu-bg";
            navToggle = "nav";
            hamburgerMenu = false;
        }
    }

    // We need this function to properly save item to the local storage
    protected void ToggleAutomaticChange()
    {
        if(automaticChange == false)
        {
            automaticChange = true;
        }
        else
        {
            automaticChange = false;
        }
        localStorage.SetItem("auto", automaticChange);
    }
}